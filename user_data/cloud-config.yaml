#cloud-config
write_files:
  - path: /etc/kubernetes/ssl/ca.pem
    encoding: base64
    content: ${base64encode(ca_pem)}

  - path: /etc/kubernetes/ssl/apiserver.pem
    encoding: base64
    content: ${base64encode(apiserver_pem)}

  - path: /etc/kubernetes/ssl/apiserver-key.pem
    encoding: base64
    content: ${base64encode(apiserverkey_pem)}

  - path: /etc/kubernetes/ssl/admin.pem
    encoding: base64
    content: ${base64encode(admin_pem)}

  - path: /etc/kubernetes/ssl/admin-key.pem
    encoding: base64
    content: ${base64encode(adminkey_pem)}

  - path: /etc/motd.d/k8s.conf
    content: |
      Hi, and welcome!

      This is your workstation for kubernetes workshop. I can see you successfully logged in. If you accidentlhy
      break it, this shouldn't be a problem. We will jsut provision a new one for you!

      Before we start let's install kubernetes. Run this magic script:

        install-kubernetes

      Now before you need to obtain workhop matherials. Just clone it from github by entering following command:

        git clone https://github.com/akranga/kube-workshop.git
        cd kube-workshop


      Good luck! And have fun!


  - path: /opt/bin/install-kubernetes
    owner: root
    permissions: 0755
    content: |
      #/bin/bash
      mkdir -p ~/.kube
      /usr/bin/git clone https://github.com/akranga/k8s-env.git ~/.kube/k8s-env | true
      sudo ~/.kube/k8s-env/etc/kubernetes/install.sh
      sudo ~/.kube/k8s-env/etc/kubernetes/export-kube-config.sh core

  - path: /etc/environment
    content: |
      COREOS_PRIVATE_IPV4=$private_ipv4
      COREOS_PUBLIC_IPV4=$public_ipv4
      K8S_VER=${kubernetes_ver}
      POD_NETWORK=10.2.0.0/16
      SERVICE_IP_RANGE=10.3.0.0/24
      K8S_SERVICE_IP=10.3.0.1
      DNS_SERVICE_IP=10.3.0.10
      NETWORK_PLUGIN=
      export COREOS_PRIVATE_IPV4 
      export COREOS_PUBLIC_IPV4 
      export K8S_VER POD_NETWORK 
      export SERVICE_IP_RANGE 
      export K8S_SERVICE_IP 
      export DNS_SERVICE_IP 
      export NETWORK_PLUGIN

#  - path: /etc/flannel/options.env
#    content: |
#      FLANNELD_IFACE=$private_ipv4
#      FLANNELD_ETCD_ENDPOINTS=http://$private_ipv4:2380

coreos:
  update:
    reboot-strategy: "off"
  flannel:
    interface: $private_ipv4
    etcd_endpoints: http://$private_ipv4:2379
  fleet:
    metadata: "role=services,cabinet=one"
  etcd2:
    name: controller
    advertise-client-urls: http://$private_ipv4:2379
    initial-advertise-peer-urls: http://$private_ipv4:2380
    listen-client-urls: http://0.0.0.0:2379
    listen-peer-urls: http://0.0.0.0:2380
    initial-cluster: controller=http://$private_ipv4:2380
  units:

    - name: etcd2.service
      command: start
      drop-ins:
        - name: 40-listen-address.conf
          content: |
            [Unit]
            Environment=ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
            Environment=ETCD_ADVERTISE_CLIENT_URLS=http://$public_ipv4:2379
    - name: docker.service
      drop-ins:
        - name: 40-ExecStartPre-symlink.conf
          content: |
            [Service]
            ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env
        - name: 40-flannel.conf
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
        - name: "50-insecure-registry.conf"
          content: |
            [Service]
            Environment=DOCKER_OPTS='--insecure-registry="0.0.0.0/0" --dns="8.8.8.8"'

    - name: flanneld.service
      command: start
      drop-ins:
        - name: 10-etcd.conf
          content: |
            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{ "Network": "10.0.0.0/16" }'

    - name: kubelet.service
      command: start
      enable: true
      content: |
        [Service]
        Environment=KUBELET_VERSION=v1.2.3_coreos.0
        Environment=KUBELET_ACI=quay.io/coreos/hyperkube
        Environment="RKT_OPTS=--volume dns,kind=host,source=/etc/resolv.conf --mount volume=dns,target=/etc/resolv.conf"
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
        --api-servers=http://127.0.0.1:8080 \
        --network-plugin-dir=/etc/kubernetes/cni/net.d \
        --network-plugin= \
        --register-node=true \
        --register-schedulable=true \
        --allow-privileged=true \
        --config=/etc/kubernetes/manifests \
        --cluster_dns=10.3.0.10 \
        --cluster_domain=cluster.local
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target




